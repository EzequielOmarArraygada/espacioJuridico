<style>
  * {
    box-sizing: border-box;
  }

  body {
    font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f9f6f1;
    margin: 0;
    padding: 0;
  }

  .profile-container {
    max-width: 900px;
    margin: 50px auto;
    padding: 40px;
    border-radius: 15px;
    background: #fff;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
  }

  .profile-title {
    text-align: center;
    font-size: 2.8rem;
    color: #4b2e2e;
    margin-bottom: 30px;
  }

  .profile-item {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 1px solid #ddd;
  }

  .profile-item label {
    font-size: 1.4rem;
    color: #5a4e4e;
    flex: 1 1 30%;
  }

  .profile-item input {
    flex: 1 1 60%;
    border: none;
    border-bottom: 2px solid #ddd;
    font-size: 1.2rem;
    padding: 8px 5px;
    background-color: #f5f5f5;
    transition: all 0.3s ease;
  }

  .profile-item input:disabled {
    background-color: #ececec;
    color: #777;
  }

  .profile-item input:focus {
    border-color: #8B5B29;
    background: #fff;
    outline: none;
  }

  .profile-item button {
    margin-left: 10px;
    padding: 8px 15px;
    background-color: #8B5B29;
    color: #fff;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.3s ease;
  }

  .profile-item button:hover {
    background-color: #5B1F0F;
  }

  .save-button {
    display: none;
  }
</style>


<script>
  function enableInput(fieldId) {
    const input = document.getElementById(fieldId);
    const saveButton = document.getElementById(`save-${fieldId}`);

    input.disabled = false;
    input.focus();
    saveButton.style.display = 'inline-block';
  }

  async function updateProfile(field, lawerId) {
    const value = document.getElementById(field).value.trim();

    if (!value) {
      Swal.fire('Error', `El campo ${field} no puede estar vacío.`, 'error');
      return;
    }

    try {
      const response = await fetch(`/api/sessions/update/${lawerId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ [field]: value }),
      });

      if (response.ok) {
        await Swal.fire('¡Actualizado!', `${field.charAt(0).toUpperCase() + field.slice(1)} actualizado correctamente.`, 'success');
        document.getElementById(field).disabled = true;
        document.getElementById(`save-${field}`).style.display = 'none';
      } else {
        const error = await response.json();
        Swal.fire('Error', error.message || `No se pudo actualizar ${field}.`, 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire('Error', 'Ocurrió un error inesperado.', 'error');
    }
  }

  async function resetPassword(lawerId) {
    const result = await Swal.fire({
      text: "¿Deseas enviar un email para restablecer tu contraseña?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#8B5B29',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, enviar!',
      cancelButtonText: 'Cancelar'
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`/api/sessions/password-reset-request`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ lawerId }),
        });

        if (response.ok) {
          Swal.fire('¡Email enviado!', '', 'success');
        } else {
          const error = await response.json();
          Swal.fire('Error', error.message || 'No se pudo enviar el email.', 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'Ocurrió un error inesperado.', 'error');
      }
    }
  }

  async function updateCasesCount() {
    const CasesId = '{{lawer.Cases}}';
    try {
      const response = await fetch(`/api/cases/${CasesId}/count`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
      });
      if (response.ok) {
        const Cases = await response.json();
        const CasesCount = Cases.Cases.products.reduce((total, product) => total + product.quantity, 0);
        const CasesCountElement = document.getElementById('Cases-count');
        if (CasesCountElement) {
          CasesCountElement.innerText = CasesCount;
          CasesCountElement.style.display = CasesCount > 0 ? 'inline-block' : 'none';
        }
      }
    } catch (error) {
      console.error('Error al obtener el conteo del carrito', error);
    }
  }

  updateCasesCount();
</script>


<div class="profile-container">
  <h2 class="profile-title">Mi Perfil</h2>

  {{!-- Campo: Nombre --}}
  <div class="profile-item">
    <label for="first_name">Nombre:</label>
    <input type="text" id="first_name" value="{{lawer.first_name}}" disabled />
    <button onclick="enableInput('first_name')">Editar</button>
    <button id="save-first_name" class="save-button" onclick="updateProfile('first_name', '{{lawer._id}}')">Guardar</button>
  </div>

  {{!-- Campo: Apellido --}}
  <div class="profile-item">
    <label for="last_name">Apellido:</label>
    <input type="text" id="last_name" value="{{lawer.last_name}}" disabled />
    <button onclick="enableInput('last_name')">Editar</button>
    <button id="save-last_name" class="save-button" onclick="updateProfile('last_name', '{{lawer._id}}')">Guardar</button>
  </div>

  {{!-- Campo: Edad --}}
  <div class="profile-item">
    <label for="age">Edad:</label>
    <input type="number" id="age" value="{{lawer.age}}" disabled />
    <button onclick="enableInput('age')">Editar</button>
    <button id="save-age" class="save-button" onclick="updateProfile('age', '{{lawer._id}}')">Guardar</button>
  </div>

  {{!-- Campo: Correo (no editable) --}}
  <div class="profile-item">
    <label for="email">Correo Electrónico:</label>
    <input type="email" id="email" value="{{lawer.email}}" disabled />
  </div>

  {{!-- Botón: Resetear contraseña --}}
  <div class="profile-item password">
    <label>Contraseña:</label>
    <button onclick="resetPassword('{{lawer._id}}')">Restablecer contraseña</button>
  </div>
</div>
